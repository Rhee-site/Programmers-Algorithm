#include <string>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

long long solution(int cap, int n, vector<int> deliveries, vector<int> pickups) {
    long long answer = 0;
    
    int box = 0; 
    stack<int> D, P; 

    for (auto i : deliveries)
        D.push(i);
    for (auto i : pickups)
        P.push(i);


    while (!D.empty() && D.top() == 0)
        D.pop();
    while (!P.empty() && P.top() == 0)
        P.pop();


    while (!(D.empty() && P.empty()))
    {
        answer += max(D.size() * 2, P.size() * 2);

        box = 0;
        while (!D.empty() && box <= cap)
        {
            if (D.top() + box <= cap)
                box += D.top();
            else
            {
                D.top() -= (cap - box);
                break;
            }
            D.pop();
        }

        box = 0;
        while (!P.empty() && box <= cap)
        {
            if (P.top() + box <= cap)
                box += P.top();
            else
            {
                P.top() -= (cap - box);
                break;
            }
            P.pop();
        }
    }
    
    return answer;
}
