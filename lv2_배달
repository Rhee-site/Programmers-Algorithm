#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void Dijkstra(int nNode, vector<int> & VecnDist, vector<pair<int,int>> * map){
    priority_queue<pair<int, int>> PQ;
    PQ.push(make_pair(0, 1));
    
    while(!PQ.empty()){
        int nCurCost = PQ.top().first;
        int nCurPos = PQ.top().second;
        PQ.pop();
        
        for(int index = 0; index < map[nCurPos].size(); index++){
            int nNextPos = map[nCurPos][index].first;
            int nNextCost = map[nCurPos][index].second;
            
            if(VecnDist[nNextPos] > nCurCost + nNextCost){
                VecnDist[nNextPos] = nCurCost + nNextCost;
                PQ.push(make_pair(VecnDist[nNextPos], nNextPos));
            }
        }
    }
}

int solution(int N, vector<vector<int> > road, int K) {
    int answer = 0;

    vector<int> VecnDist;
    VecnDist.resize(N + 1, 1e9);
    
    vector<pair<int,int>> map[51];
    for(int index = 0; index < road.size(); index++){
        int nSrcNode = road[index][0];
        int nDstNode = road[index][1];
        int nDist = road[index][2];
        
        map[nSrcNode].push_back(make_pair(nDstNode, nDist));
        map[nDstNode].push_back(make_pair(nSrcNode, nDist));
    }

    VecnDist[1] = 0;
    Dijkstra(K, VecnDist, map);
    
    for(int index = 1; index <= N; index++)
        if(VecnDist[index] <= K)
            answer++;
    
    return answer;
}
